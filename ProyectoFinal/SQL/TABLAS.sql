--usuario:anyelim contrasena:123456
/*-----------------------------------------------DATOS-PERSONALES-----------------------------------------------------------*/

--Tabla de referencia de sexo
CREATE TABLE DT_SEXO (
    SEXO_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TIPO VARCHAR2(20) NOT NULL);

--Tabla de referencia de estado civil
CREATE TABLE DT_ESTADO_CIVIL (
    ESTADO_CIVIL_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TIPO VARCHAR2(20) NOT NULL);

--Tabla de referencia de nacionalidad
CREATE TABLE DT_NACIONALIDAD (
    NACIONALIDAD_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TIPO VARCHAR2(20) NOT NULL);

--Tabla de referencia de provincia
CREATE TABLE DT_PROVINCIA (
    PROVINCIA_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NOMBRE VARCHAR2(20) NOT NULL);

--Tabla de referencia de canton
CREATE TABLE DT_CANTON (
    CANTON_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PROVINCIA_ID NUMBER NOT NULL,
    NOMBRE VARCHAR2(20) NOT NULL);

--Tabla de referencia de distrito
CREATE TABLE DT_DISTRITO (
    DISTRITO_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    CANTON_ID NUMBER NOT NULL,
    NOMBRE VARCHAR2(40) NOT NULL);

--Tabla de telefonos de contacto
CREATE TABLE DT_TELEFONO (
    TELEONO_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PACIENTE_ID NUMBER NOT NULL,
    NOMBRE VARCHAR2(20) NOT NULL,
    NUMERO NUMBER(20) NOT NULL);

--Tabla de datos personales del paciente
CREATE TABLE DATOS_PERSONALES(
    PACIENTE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    NOMBRE VARCHAR2(20) NOT NULL,
    APELLIDOS VARCHAR2(40) NOT NULL,
    SEXO_ID NUMBER NOT NULL,
    EDAD NUMBER NOT NULL,
    FECHA_DE_NACIMIENTO DATE NOT NULL,
    NIVEL_DE_ESCOLARIDAD VARCHAR2(200) NOT NULL,
    OCUPACION_ACTUAL VARCHAR2(200) NOT NULL,
    ESTADO_CIVIL_ID NUMBER NOT NULL,
    NUMERO_DE_HIJOS NUMBER NOT NULL,
    CON_QUIEN_VIVE VARCHAR2(200) NOT NULL,
    NACIONALIDAD_ID NUMBER NOT NULL,
    DOMICILIO VARCHAR2(200) NOT NULL,
    CORREO_ELECTRONICO VARCHAR2(200) NOT NULL,
    MOTIVO_DE_VISITA VARCHAR2(200) NOT NULL,
    REFERIDO_POR VARCHAR2(200) NOT NULL,
    NUTRICIONISTA_RESPONSABLE_DE_PRIMERA_VISITA VARCHAR2(200) NOT NULL);

--ALTER TABLE DATOS_PERSONALES RENAME COLUMN NUMRERO_DE_HIJOS TO NUMERO_DE_HIJOS;

--Relacionar la tabla de referencia sexo con la tabla principal datos personales
ALTER TABLE DATOS_PERSONALES ADD CONSTRAINT FK_SEXO_PACIENTE FOREIGN KEY (SEXO_ID) 
    REFERENCES DT_SEXO (SEXO_ID);
--Relacionar la tabla de referencia estdo civil con la tabla principal datos personales    
ALTER TABLE DATOS_PERSONALES ADD CONSTRAINT FK_ESTADO_CIVIL_PACIENTE FOREIGN KEY (ESTADO_CIVIL_ID) 
    REFERENCES DT_ESTADO_CIVIL (ESTADO_CIVIL_ID);
--Relacionar la tabla de referencia nacionalidad con la tabla principal datos personales
ALTER TABLE DATOS_PERSONALES ADD CONSTRAINT FK_NACIONALIDAD_PACIENTE FOREIGN KEY (NACIONALIDAD_ID) 
    REFERENCES DT_NACIONALIDAD (NACIONALIDAD_ID);

--Relacionar la tabla principal datos personales con la tabla de telefonos de contacto
ALTER TABLE DT_TELEFONO ADD CONSTRAINT FK_TELEFONOS_PACIENTE FOREIGN KEY (PACIENTE_ID) 
    REFERENCES DATOS_PERSONALES (PACIENTE_ID);

--Esto lo cambie despues y preferi cambiarlo asi a borrarlo todo de cascada y luego volver a crear todo
--Agregar la columna sexo como varchar2 a datos personales
ALTER TABLE DATOS_PERSONALES ADD SEXO VARCHAR2(20);
--Eliminar la columna sexo_id number de datos personales
ALTER TABLE DATOS_PERSONALES DROP COLUMN SEXO_ID;


--Vistas Materializadas
--Vista de Telefonos
CREATE MATERIALIZED VIEW TELEFONOS_DE_PERSONAS
    REFRESH FORCE ON DEMAND AS
    SELECT D.PACIENTE_ID AS ID_DEL_PACIENTE,  TELEONO_ID, D.NOMBRE||' '|| D.APELLIDOS AS NOMBRE_DEL_PACIENTE,
    T.NUMERO AS NUMERO_DE_TELEFONO, T.NOMBRE AS NOMBRE_DEL_TELEFONO FROM DATOS_PERSONALES D
    INNER JOIN DT_TELEFONO T ON D.PACIENTE_ID = T.PACIENTE_ID;

--Vista de registros resumida
CREATE MATERIALIZED VIEW REGISTROS_RESUMEN
    REFRESH FORCE ON DEMAND AS
    SELECT PACIENTE_ID AS ID_DEL_PACIENTE, NOMBRE||' '|| APELLIDOS AS NOMBRE_DEL_PACIENTE,
    EDAD AS EDAD_DEL_PACIENTE, SEXO AS SEXO_DEL_PACIENTE
    FROM DATOS_PERSONALES;
    
/*------------------------------------------------------ANTECEDENTES---------------------------------------------------------------*/

--Tabla de referencia del paciente a las patologias
CREATE TABLE ANTECEDENTES_DE_EVALUACION_CLINICA(
    ANTECEDENTE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PACIENTE_ID NUMBER NOT NULL);

--Tabla de patologias familiares
CREATE TABLE PATOLOGIA_FAMILIAR(
    AEC_PATOLOGIA_FAMILIAR_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ANTECEDENTE_ID NUMBER NOT NULL,
    NOMBRE VARCHAR2(200) NOT NULL,
    PARENTESCO VARCHAR2(200) NULL,
    APLICA NUMBER(1,0) NOT NULL);

--Tabla de patologias personales
CREATE TABLE PATOLOGIA_PERSONAL(
    AEC_PATOLOGIA_PERSONAL_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ANTECEDENTE_ID NUMBER NOT NULL,
    NOMBRE VARCHAR2(200) NOT NULL,
    APLICA NUMBER(1,0) NOT NULL);

--Relacionar la tabla de referencia antecedentes con la tabla principal datos personales
ALTER TABLE ANTECEDENTES_DE_EVALUACION_CLINICA ADD CONSTRAINT FK_ANTECEDENTE_PACIENTE FOREIGN KEY (PACIENTE_ID) 
    REFERENCES DATOS_PERSONALES (PACIENTE_ID) ON DELETE CASCADE;  

--Relacionar la tabla patologia familiar con la tabla de referencia antecedentes
ALTER TABLE PATOLOGIA_FAMILIAR ADD CONSTRAINT FK_PATOLOGIA_FAMILIAR_ANTECEDENTE FOREIGN KEY (ANTECEDENTE_ID) 
    REFERENCES ANTECEDENTES_DE_EVALUACION_CLINICA (ANTECEDENTE_ID);

--Relacionar la tabla patologia personal con la tabla de referencia antecedentes
ALTER TABLE PATOLOGIA_PERSONAL ADD CONSTRAINT FK_PATOLOGIA_PERSONAL_ANTECEDENTE FOREIGN KEY (ANTECEDENTE_ID) 
    REFERENCES ANTECEDENTES_DE_EVALUACION_CLINICA (ANTECEDENTE_ID);  

--Vistas Materializadas
--Vista de Patologias Familiares
CREATE MATERIALIZED VIEW PATOLOGIAS_FAMILIARES_VER
    REFRESH FORCE ON DEMAND AS
    SELECT ANTECEDENTE_ID AS CODIGO_DE_ANTECEDENTE, AEC_PATOLOGIA_FAMILIAR_ID AS ID_DE_PATOLOGIA_FAMILIAR, 
    NOMBRE AS NOMBRE_DE_LA_PATOLOGIA, PARENTESCO AS FAMILIAR_QUE_LO_PADECE, DECODE(APLICA,1, 'Si', 0, 'No')
    AS EL_PACIENTE_LO_PADECE FROM PATOLOGIA_FAMILIAR 
    ORDER BY EL_PACIENTE_LO_PADECE DESC;

--Vista de Patologias Personales
CREATE MATERIALIZED VIEW PATOLOGIAS_PRSONALES_VER
    REFRESH FORCE ON DEMAND AS
    SELECT ANTECEDENTE_ID AS CODIGO_DE_ANTECEDENTE, AEC_PATOLOGIA_PERSONAL_ID AS ID_DE_PATOLOGIA_PERSONAL, 
    NOMBRE AS NOMBRE_DE_LA_PATOLOGIA, DECODE(APLICA,1, 'Si', 0, 'No') AS EL_PACIENTE_LO_PADECE FROM PATOLOGIA_PERSONAL
    ORDER BY EL_PACIENTE_LO_PADECE DESC;

/*----------------------------------------------------MEDICAMENTOS-----------------------------------------------------------------*/

--Tabla de referencia al paciente con los medicamentos de consumo actual
CREATE TABLE MEDICAMENTOS_DE_CONSUMO_ACTUAL(
    MEDICAMENTO_DE_CONSUMO_ACTUAL_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PACIENTE_ID NUMBER NOT NULL);

--Tabla de medicamentos
CREATE TABLE MEDICAMENTO(
    MEDICAMENTO_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    MEDICAMENT0_DE_CONSUMO_ACTUAL_ID NUMBER NOT NULL,
    NOMBRE VARCHAR2(200) NOT NULL,
    DIETETICO NUMBER(1,0) NOT NULL,
    FRECUENCIA VARCHAR2(200) NULL,
    DOSIS VARCHAR2(200) NULL,
    RESULTADOS VARCHAR2(400) NULL);

--Relacionar la tabla de referencia medicamentos de consumo actual con la tabla principal datos personales
ALTER TABLE MEDICAMENTOS_DE_CONSUMO_ACTUAL ADD CONSTRAINT FK_MEDICAMENTOS_PACIENTE FOREIGN KEY (PACIENTE_ID) 
    REFERENCES DATOS_PERSONALES (PACIENTE_ID) ON DELETE CASCADE;

--Relacionar la tabla medicamento con la tabla de referencia medicamentos de consumo actual
ALTER TABLE MEDICAMENTO ADD CONSTRAINT FK_MEDICAMENTO_MEDICAMENTOS_ACTUALES FOREIGN KEY (MEDICAMENTO_DE_CONSUMO_ACTUAL_ID)
    REFERENCES MEDICAMENTOS_DE_CONSUMO_ACTUAL (MEDICAMENTO_DE_CONSUMO_ACTUAL_ID);

--Vistas Materializadas
--Vista de Medicamentos
CREATE MATERIALIZED VIEW MEDICAMENTOS_VER
    REFRESH FORCE ON DEMAND AS
    SELECT MEDICAMENTO_DE_CONSUMO_ACTUAL_ID, MEDICAMENTO_ID AS ID_DEL_MEDICAMENTO, 
    NOMBRE AS NOMBRE_DEL_MEDICAMENTO, DECODE(DIETETICO, 1, 'Si', 0, 'No') AS EL_MEDICAMENTO_ES_DIETETICO,
    FRECUENCIA, DOSIS, RESULTADOS FROM MEDICAMENTO;

/*-----------------------------------------------------EVALUACION-BIOQUIMICA-------------------------------------------------------*/

--Tabla de referencia al paciente con las evaluaciones bioquimicas
CREATE TABLE EVALUACION_BIOQUIMICA(
    EVALUACION_BIOQUIMICA_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PACIENTE_ID NUMBER NOT NULL);

--Tabla de evaluaciones
CREATE TABLE EVALUACION(
    EVALUACION_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    EVALUACION_BIOQUIMICA_ID NUMBER NOT NULL,
    NOMBRE_DE_EXAMEN VARCHAR2(200) NULL,
    ARCHIVO_ADJUNTO BLOB NULL);

--Relacionar la tabla de referencia evaluacion bioquimica con la tabla principal datos personales
ALTER TABLE EVALUACION_BIOQUIMICA ADD CONSTRAINT FK_EVALUACION_BIOQUIMICA_PACIENTE FOREIGN KEY (PACIENTE_ID) 
    REFERENCES DATOS_PERSONALES (PACIENTE_ID) ON DELETE CASCADE;

--Relacionar la tabla evaluacion con la de referencia evaluacion bioquimica
ALTER TABLE EVALUACION ADD CONSTRAINT FK_EVALUACION_EVALUACION_BIOQUIMICA FOREIGN KEY (EVALUACION_BIOQUIMICA_ID) 
    REFERENCES EVALUACION_BIOQUIMICA (EVALUACION_BIOQUIMICA_ID);    

--Vistas Materializadas
--Vista de Evaluaciones
CREATE MATERIALIZED VIEW EVALUACION_VER
    REFRESH FORCE ON DEMAND AS
    SELECT EVALUACION_BIOQUIMICA_ID, EVALUACION_ID AS ID_DE_LA_EVALUACION, NOMBRE_DE_EXAMEN, ARCHIVO_ADJUNTO
    FROM EVALUACION;

/*-----------------------------------------------DATOS-ANTROPOMETRICOS--------------------------------------------------*/

--Tabla de referencia al paciente con sus datos antropometricos
CREATE TABLE DATOS_ANTROPOMETRICOS(
    DATOS_ANTROP_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PACIENTE_ID NUMBER NOT NULL);

--Tabla de mediciones
CREATE TABLE MEDICIONES(
    MEDICION_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DATOS_ANTROP_ID NUMBER NOT NULL,
    TALLA_CM NUMBER NOT NULL,
    PESO_USUAL_KG NUMBER NOT NULL,
    CIRCUNFERENCIA_DE_MUNECA_CM NUMBER NOT NULL,
    PESO_ADECUADO_KG NUMBER NOT NULL,
    CONTEXTURA VARCHAR2(200) NOT NULL,
    PESO_META_KG NUMBER NOT NULL);

--Tabla de mediciones de seguimiento
CREATE TABLE MEDICIONES_DE_SEGUIMIENTO(
    MEDICION_SEGUIMIENTO_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DATOS_ANTROP_ID NUMBER NOT NULL,
    PESO_KG NUMBER NOT NULL,
    IMC NUMBER NOT NULL,
    CIRCUNFERENCIA_DE_CINTURA_CM NUMBER NOT NULL,
    FECHA DATE DEFAULT SYSDATE NOT NULL);

--Tabla de bioimpedancia  
CREATE TABLE BIOIMPEDANCIA(
    BIOIMPEDANCIA_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DATOS_ANTROP_ID NUMBER NOT NULL,
    PORCENTAJE_GRASA NUMBER NOT NULL,
    PORCENTAJE_AGUA NUMBER NOT NULL,
    MASA_MUSCULAR VARCHAR2(200) NOT NULL,
    COMPLEXION_FISICA VARCHAR2(200) NOT NULL,
    EDAD_METABOLICA NUMBER NOT NULL,
    MASA_OSEA VARCHAR2(200) NOT NULL,
    GRASA_VISERAL VARCHAR2(200) NOT NULL,
    FECHA DATE DEFAULT SYSDATE NOT NULL);

--Relacionar la tabla de referencia datos antropometricos con la tabla principal datos personales
ALTER TABLE DATOS_ANTROPOMETRICOS ADD CONSTRAINT FK_DATOS_ANTROPOMETRICOS_PACIENTE FOREIGN KEY (PACIENTE_ID)
    REFERENCES DATOS_PERSONALES (PACIENTE_ID) ON DELETE CASCADE;

--Relacionar la tabla mediciones con la tabla de referencia datos antropometricos
ALTER TABLE MEDICIONES ADD CONSTRAINT FK_MEDICIONES_DATOS_ANTROPOMETRICOS FOREIGN KEY (DATOS_ANTROP_ID)
    REFERENCES DATOS_ANTROPOMETRICOS (DATOS_ANTROP_ID);

--Relacionar la tabla mediciones de seguiemiento con la tabla de referencia datos antropometricos
ALTER TABLE MEDICIONES_DE_SEGUIMIENTO ADD CONSTRAINT FK_MEDICIONES_SEG_DATOS_ANTROP FOREIGN KEY (DATOS_ANTROP_ID)
    REFERENCES DATOS_ANTROPOMETRICOS (DATOS_ANTROP_ID);

--Relacionar la tabla bioimpedancia con la tabla de referencia datos antropometricos
ALTER TABLE BIOIMPEDANCIA ADD CONSTRAINT FK_BIOIMPEDANCIA_DATOS_ANTROPOMETRICOS FOREIGN KEY (DATOS_ANTROP_ID)
    REFERENCES DATOS_ANTROPOMETRICOS (DATOS_ANTROP_ID);

--Vistas materializadas
--Vista de mediciones
CREATE MATERIALIZED VIEW MEDICIONES_VER
    REFRESH FORCE ON DEMAND AS
    SELECT DATOS_ANTROP_ID, MEDICION_ID, TALLA_CM, PESO_USUAL_KG, 
    CIRCUNFERENCIA_DE_MUNECA_CM, PESO_ADECUADO_KG, CONTEXTURA, PESO_META_KG
    FROM MEDICIONES;

--Vista de pesos
CREATE MATERIALIZED VIEW PESOS_VER
    REFRESH FORCE ON DEMAND AS
    SELECT DATOS_ANTROP_ID, MEDICION_ID, PESO_USUAL_KG, PESO_ADECUADO_KG, PESO_META_KG
    FROM MEDICIONES;

--Vista de mediciones de seguimiento
CREATE MATERIALIZED VIEW MEDICIONES_SEGUIMIENTO_VER
    REFRESH FORCE ON DEMAND AS
    SELECT DATOS_ANTROP_ID, MEDICION_SEGUIMIENTO_ID, PESO_KG, IMC, CIRCUNFERENCIA_DE_CINTURA_CM, FECHA
    FROM MEDICIONES_DE_SEGUIMIENTO ORDER BY FECHA;

--Vista de historial de pesos
CREATE MATERIALIZED VIEW HISTORIAL_PESO
    REFRESH FORCE ON DEMAND AS
    SELECT DATOS_ANTROP_ID, PESO_KG, IMC, FECHA
    FROM MEDICIONES_DE_SEGUIMIENTO ORDER BY FECHA;

--Vista de bioimpedancia
CREATE MATERIALIZED VIEW BIOIMPEDANCIA_VER
    REFRESH FORCE ON DEMAND AS
    SELECT DATOS_ANTROP_ID, BIOIMPEDANCIA_ID, PORCENTAJE_GRASA, PORCENTAJE_AGUA, MASA_MUSCULAR, COMPLEXION_FISICA,
    EDAD_METABOLICA, MASA_OSEA, GRASA_VISERAL, FECHA
    FROM BIOIMPEDANCIA ORDER BY FECHA;
    
/*-----------------------------------------------------HABITOS------------------------------------------------------*/

--Tabla de referencia al paciente con sus habitos
CREATE TABLE HABITOS(
    HABITOS_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PACIENTE_ID NUMBER NOT NULL);

--Tabla de actividades
CREATE TABLE ACTIVIDADES(
    ACTIVIDAD_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    HABITOS_ID NUMBER NOT NULL,
    ACTIVIDAD VARCHAR2(600) NOT NULL,
    FRECUENCIA VARCHAR2(200) NOT NULL,
    DURACION VARCHAR2(200) NOT NULL,
    DETALLES VARCHAR2(600) NOT NULL);

--Tabla de alimentos
CREATE TABLE ALIMENTOS(
    ALIMENTOS_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    HABITOS_ID NUMBER NOT NULL,
    ALIMENTO VARCHAR2(200) NOT NULL,
    GUSTO NUMBER(1,0) NOT NULL,
    ALERGIA NUMBER(1,0) NOT NULL);

--Tabla de alimentos de consumo usual
CREATE TABLE CONSUMO_USUAL(
    CONSUMO_USUAL_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    HABITOS_ID NUMBER NOT NULL,
    ALIMENTO VARCHAR2(200) NOT NULL,
    PREPARACION VARCHAR2(600) NOT NULL,
    TIEMPO_DE_CONSUMO VARCHAR2(200) NOT NULL); --> Entre semana o los fines de semana

--Relacionar la tabla de referencia con la tabla principal datos personales
ALTER TABLE HABITOS ADD CONSTRAINT FK_HABITOS_PACIENTE FOREIGN KEY (PACIENTE_ID)
    REFERENCES DATOS_PERSONALES (PACIENTE_ID) ON DELETE CASCADE;

--Relacionar la tabla actividades con la tabla de referencia habitos
ALTER TABLE ACTIVIDADES ADD CONSTRAINT FK_ACTIVIDADES_HABITOS FOREIGN KEY (HABITOS_ID)
    REFERENCES HABITOS (HABITOS_ID);

--Relacionar la tabla alimentos con la tabla de referencia habitos
ALTER TABLE ALIMENTOS ADD CONSTRAINT FK_ALIMENTOS_HABITOS FOREIGN KEY (HABITOS_ID)
    REFERENCES HABITOS (HABITOS_ID);

--Relacionar la tabla consumo_usual con la tabla de referencia habitos
ALTER TABLE CONSUMO_USUAL ADD CONSTRAINT FK_CONSUMO_USUAL_HABITOS FOREIGN KEY (HABITOS_ID)
    REFERENCES HABITOS (HABITOS_ID);

--Vistas materializadas
--Vista de alimentos
CREATE MATERIALIZED VIEW ALIMENTOS_VER
    REFRESH FORCE ON DEMAND AS
    SELECT HABITOS_ID, ALIMENTOS_ID, ALIMENTO, 
    DECODE(GUSTO, 1, 'Si', 0, 'No') AS LE_GUSTA, DECODE(ALERGIA, 1, 'Si', 0, 'No') AS ES_ALERGICO
    FROM ALIMENTOS ORDER BY ALIMENTOS_ID;
    
/*-----------------------------------------------FRECUENCIA-DE-CONSUMO--------------------------------------------------*/

--Tabla de referencia al paciente con su frecuencia de consumo
CREATE TABLE FRECUENCIA_CONSUMO(
    ID_FRECUENCIA_CONSUMO NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PACIENTE_ID NUMBER NOT NULL);

--Tabla de frecuencia de consumo de ciertos alimentos
CREATE TABLE ALIMENTOS_FRECUENCIA(
    ID_ALIMENTOS_FRECUENCIA NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    ID_FRECUENCIA_CONSUMO NUMBER NOT NULL,
    ALIMENTO VARCHAR2(200) NOT NULL,
    CONSUME NUMBER(1,0) NOT NULL,
    DETALLE VARCHAR2(600) NOT NULL,
    FRECUENCIA_POR_DIA NUMBER NOT NULL,
    FRECUENCIA_POR_SEMANA NUMBER NOT NULL,
    FRECUENCIA_POR_MES NUMBER NOT NULL,
    OBSERVACIONES VARCHAR2(600) NOT NULL);

--Relacionar la tabla de referencia frecuencia de consumo con la tabla principal datos personales
ALTER TABLE FRECUENCIA_CONSUMO ADD CONSTRAINT FK_FRECUENCIA_CONSUMO_PACIENTE FOREIGN KEY (PACIENTE_ID)
    REFERENCES DATOS_PERSONALES (PACIENTE_ID) ON DELETE CASCADE;

--Relacionar la tabla alimentos frecuencia con la tabla de referencia frecuencia consumo
ALTER TABLE ALIMENTOS_FRECUENCIA ADD CONSTRAINT FK_ALIMENTOS_FRECUENCIA_CONSUMO FOREIGN KEY (ID_FRECUENCIA_CONSUMO)
    REFERENCES FRECUENCIA_CONSUMO (ID_FRECUENCIA_CONSUMO);
    
--Vistas materializadas
--Vista de alimentos_frecuencia
CREATE MATERIALIZED VIEW ALIMENTOS_FRECUENCIA_VER
    REFRESH FORCE ON DEMAND AS
    SELECT ID_FRECUENCIA_CONSUMO, ID_ALIMENTOS_FRECUENCIA, ALIMENTO, CONSUME, DETALLE,
    FRECUENCIA_POR_DIA, FRECUENCIA_POR_SEMANA, FRECUENCIA_POR_MES, OBSERVACIONES
    FROM ALIMENTOS_FRECUENCIA ORDER BY ID_ALIMENTOS_FRECUENCIA;

/*-----------------------------------------------------SEGUIMIENTO--------------------------------------------------*/

--Tabla de referencia al paciente con sus seguimientos
CREATE TABLE SEGUIMIENTO(
    SEGUIMIENTO_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PACIENTE_ID NUMBER NOT NULL,
    FECHA DATE DEFAULT SYSDATE NOT NULL,
    EVALUACION_DE_COMPROMISOSO VARCHAR2(1000) NOT NULL,
    CONSUMO_USUAL VARCHAR2(1000) NOT NULL,
    HALLAZGOS_DE_ENTREVISTA VARCHAR2(1000) NOT NULL,
    TEMA_TRABATO VARCHAR2(1000) NOT NULL,
    COMPROMISOS VARCHAR2(1000) NOT NULL);

--Relacionar la tabla de referencia sguimiento con la tabla principal datos peronales
ALTER TABLE SEGUIMIENTO ADD CONSTRAINT FK_SEGUIMEINTO_PACIENTE  FOREIGN KEY (PACIENTE_ID)
    REFERENCES DATOS_PERSONALES (PACIENTE_ID) ON DELETE CASCADE;

--Vistas materializadas
--Vista de seguimiento
CREATE MATERIALIZED VIEW SEGUIMIENTO_VER
    REFRESH FORCE ON DEMAND AS 
    SELECT SEGUIMIENTO_ID, PACIENTE_ID, FECHA, EVALUACION_DE_COMPROMISOSO, CONSUMO_USUAL, 
    HALLAZGOS_DE_ENTREVISTA, TEMA_TRABATO, COMPROMISOS FROM SEGUIMIENTO ORDER BY FECHA;





